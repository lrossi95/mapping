{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "\n",
    "import geopandas as gpd\n",
    "import pandas as pd\n",
    "from shapely.geometry import Point, shape\n",
    "\n",
    "from modules import dump_jsonl, load_jsonl_null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using CRS: EPSG:4326\n",
      "Using CRS: EPSG:4326\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/c0/wz1f7j2d2ks7qfmnv84w_jlr0000gn/T/ipykernel_35963/3092448261.py:23: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n",
      "\n",
      "  gdf['centroid'] = gdf.centroid\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "region = 'martinique'\n",
    "communes = gpd.read_file('data/maps/communes-20220101-shp/communes-20220101.shp')\n",
    "print(f\"Using CRS: {communes.crs}\")\n",
    "crs_to_use = communes.crs\n",
    "communes.loc[communes['nom'] == 'Fort-de-France'].plot()\n",
    "\n",
    "if region == 'martinique':\n",
    "    # Load the data\n",
    "    gdf = gpd.read_file('data/maps/Filosofi2017_carreaux_200m_shp/Filosofi2017_carreaux_200m_mart.shp')\n",
    "    REG = '02'\n",
    "elif region == 'metropolitaine':\n",
    "    # Load the data\n",
    "    gdf = gpd.read_file('data/maps/Filosofi2017_carreaux_200m_shp/Filosofi2017_carreaux_200m_met.shp')\n",
    "\n",
    "elif region == 'reunion':\n",
    "    # Load the data\n",
    "    gdf = gpd.read_file('data/maps/Filosofi2017_carreaux_200m_shp/Filosofi2017_carreaux_200m_reu.shp')\n",
    "\n",
    "gdf = gdf.to_crs(crs_to_use)\n",
    "print(f\"Using CRS: {gdf.crs}\")\n",
    "\n",
    "# calculate the centroid of each polygon\n",
    "gdf['centroid'] = gdf.centroid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpe23 = pd.read_parquet('data/bpe/BPE23.parquet')\n",
    "\n",
    "# filter for martinique\n",
    "bpe23 = bpe23[bpe23['REG'] == REG]\n",
    "\n",
    "# Create a point using the first row of the bpe23 DataFrame\n",
    "point = Point(bpe23.iloc[0]['LONGITUDE'], bpe23.iloc[0]['LATITUDE'])\n",
    "\n",
    "# Convert the DataFrame to a GeoDataFrame and set the CRS\n",
    "gdf_bpe23 = gpd.GeoDataFrame(bpe23, geometry=gpd.points_from_xy(bpe23.LONGITUDE, bpe23.LATITUDE))\n",
    "gdf_bpe23 = gdf_bpe23.set_crs('EPSG:4326').to_crs(crs_to_use)\n",
    "\n",
    "# Perform spatial join\n",
    "gdf_bpe_23 = gpd.sjoin(gdf_bpe23, gdf, how=\"inner\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test with 1 carreau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3288e0d56eee4dc1b54d31fc953ad22f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import requests\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "profiles = ['cycling-regular','foot-walking','driving-car']\n",
    "\n",
    "range_type = 'time'\n",
    "range = [300]  # 5 minutes\n",
    "\n",
    "\n",
    "\n",
    "def get_isochrones(api_key, locations, profile, range_type=range_type, range=range):\n",
    "    \"\"\"\n",
    "    Get isochrones for different profiles using OpenRouteService API.\n",
    "\n",
    "    Parameters:\n",
    "    - api_key (str): Your OpenRouteService API key.\n",
    "    - locations (list): List of [longitude, latitude] pairs.\n",
    "    - profile (str): The mode of transport (e.g., 'driving-car', 'cycling-regular', 'foot-walking').\n",
    "    - range_type (str): The type of range ('time' or 'distance').\n",
    "    - range (list): List of ranges in seconds (for 'time') or meters (for 'distance').\n",
    "\n",
    "    Returns:\n",
    "    - dict: The response from the OpenRouteService API.\n",
    "    \"\"\"\n",
    "    url = 'https://api.openrouteservice.org/v2/isochrones/' + profile\n",
    "    headers = {\n",
    "        'Authorization': api_key,\n",
    "        'Content-Type': 'application/json'\n",
    "    }\n",
    "    body = {\n",
    "        'locations': locations,\n",
    "        'range': range,\n",
    "        'range_type': range_type\n",
    "    }\n",
    "    response = requests.post(url, json=body, headers=headers)\n",
    "    return response.json()\n",
    "\n",
    "# Example usage:\n",
    "api_key = '5b3ce3597851110001cf6248e1c21942e51e45a9ba5e6081a595bc3d'\n",
    "\n",
    "for carreaux_id in tqdm(gdf_bpe_23.loc[gdf_bpe_23['LIBCOM']=='BASSE-POINTE']['Idcar_200m'].unique()[4:10]):\n",
    "# carreaux_id = 'CRS5490RES200mN1615600E708200'\n",
    "\n",
    "    test_car = gdf.loc[gdf['Idcar_200m']==carreaux_id]\n",
    "    try:\n",
    "        commune_id = test_car['lcog_geo'].item() # it is a string\n",
    "\n",
    "        for profile in profiles:\n",
    "            locations = [[test_car['centroid'].x.item(), test_car['centroid'].y.item()]]\n",
    "            # locations = [[-60.87711, 14.39711]]  # Example location\n",
    "            isochrones = get_isochrones(api_key, locations,profile=profile)\n",
    "            isochrones['carreaux_id'] = carreaux_id\n",
    "            isochrones['commune_id'] = commune_id\n",
    "            isochrones['profile'] = profile\n",
    "            dump_jsonl(isochrones, f'isochrones/{carreaux_id}_{profile}_{range_type}_{range}.jsonl')\n",
    "    except:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 1 records from isochrones/CRS5490RES200mN1644400E702000_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1643600E704000_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644600E702800_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1643600E704000_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644200E702800_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644400E702000_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640200E702400_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644200E702800_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644600E702800_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640800E702200_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640800E702400_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640200E702200_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1643600E704000_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644400E703000_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644600E702800_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640800E702400_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644400E703000_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640800E702200_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644400E702000_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640800E702400_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640200E702200_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640200E702400_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640800E702200_foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/foot-walking_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644200E702800_cycling-regular_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640200E702200_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1640200E702400_driving-car_time_[300].jsonl\n",
      "Loaded 1 records from isochrones/CRS5490RES200mN1644400E703000_foot-walking_time_[300].jsonl\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Get a list of all JSONL files in the isochrones folder\n",
    "isochrone_files = glob.glob('isochrones/*.jsonl')\n",
    "\n",
    "# Initialize an empty list to store dataframes\n",
    "dataframes = []\n",
    "\n",
    "# Loop through each file and read it into a dataframe\n",
    "for file in isochrone_files:\n",
    "    jsonl = pd.DataFrame(load_jsonl_null(file))\n",
    "\n",
    "    # Add the information about ids and profile\n",
    "    carreaux_id = jsonl['carreaux_id'].item()\n",
    "    commune_id = jsonl['commune_id'].item()\n",
    "    profile = jsonl['profile'].item()\n",
    "\n",
    "    # Extract features and transform into GeoSeries\n",
    "    features = pd.json_normalize(jsonl['features']).rename(columns={0: 'features'})\n",
    "\n",
    "    features_normalize = pd.json_normalize(features['features'])\n",
    "\n",
    "    # Clean up column names (if needed)\n",
    "    features_normalize.columns = features_normalize.columns.str.strip()\n",
    "\n",
    "    # Convert each row into a Shapely geometry.\n",
    "    # If the \"geometry.type\" column is missing, you can default to a type (e.g., \"Polygon\")\n",
    "    features_normalize['geometry'] = features_normalize.apply(\n",
    "        lambda row: shape({\n",
    "            'type': row.get('geometry.type', 'Polygon'),  # Use 'Polygon' as default if missing\n",
    "            'coordinates': row['geometry.coordinates']\n",
    "        }),\n",
    "        axis=1\n",
    "    )\n",
    "\n",
    "    features_normalize_gdf = gpd.GeoDataFrame(features_normalize)\n",
    "    \n",
    "    features_normalize_gdf['carreaux_id'] = carreaux_id\n",
    "    features_normalize_gdf['commune_id'] = commune_id\n",
    "    features_normalize_gdf['profile'] = profile\n",
    "    \n",
    "    dataframes.append(features_normalize_gdf)\n",
    "\n",
    "# Concatenate all dataframes into a single dataframe\n",
    "all_isochrones_df = pd.concat(dataframes, ignore_index=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as mpatches\n",
    "import matplotlib.lines as mlines\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 10))\n",
    "\n",
    "# --- Plot your data (without labels) ---\n",
    "communes.loc[communes['insee'] == commune_id].plot(\n",
    "    ax=ax, color='blue', edgecolor='black', alpha=0.2\n",
    ")\n",
    "# test_car.boundary.plot(ax=ax, color='red')\n",
    "\n",
    "# Define fixed colors for isochrones\n",
    "iso_colors = ['blue', 'green', 'orange']\n",
    "profiles = all_isochrones_df['profile'].unique()\n",
    "iso_patches = []  # to store custom legend handles for isochrones\n",
    "\n",
    "for i, profile in enumerate(profiles):\n",
    "    color = iso_colors[i % len(iso_colors)]\n",
    "    subset = all_isochrones_df.loc[all_isochrones_df['profile'] == profile]\n",
    "    subset.plot(ax=ax, alpha=0.5, color=color)\n",
    "    iso_patches.append(\n",
    "        mpatches.Patch(facecolor=color, alpha=0.5, label=f'Isochrone ({profile})')\n",
    "    )\n",
    "\n",
    "gdf_bpe_23.plot(ax=ax, color='black', markersize=1)\n",
    "\n",
    "# --- Create custom legend handles for the other layers ---\n",
    "commune_patch  = mpatches.Patch(facecolor='blue', alpha=0.1,  edgecolor='black', label='Commune')\n",
    "# Here, \"Carreaux\" is drawn using the same color as the test_car boundary for illustration.\n",
    "carreaux_patch = mpatches.Patch(facecolor='none', edgecolor='red', label='Carreaux')\n",
    "amenities_marker = mlines.Line2D([], [], color='black', marker='o', linestyle='None',\n",
    "                                 markersize=5, label='Amenities')\n",
    "\n",
    "# --- Create two separate legends with titles ---\n",
    "\n",
    "# Legend for Isochrones\n",
    "legend_iso = ax.legend(handles=iso_patches, title='isochrones:', \n",
    "                       loc='upper left', bbox_to_anchor=(1.05, 0.5), frameon=True)\n",
    "\n",
    "# Legend for other layers (Amenities and Carreaux)\n",
    "legend_other = ax.legend(handles=[commune_patch, carreaux_patch, amenities_marker],\n",
    "                         title='Amenities',\n",
    "                         loc='lower left', bbox_to_anchor=(1.05, 0.2), frameon=True)\n",
    "\n",
    "# Add the isochrone legend back to the axes so both appear\n",
    "ax.add_artist(legend_iso)\n",
    "\n",
    "buffer = 0.01  # Adjust this fixed value as needed\n",
    "\n",
    "minx, miny, maxx, maxy = all_isochrones_df.total_bounds\n",
    "\n",
    "ax.set_xlim(minx - buffer, maxx + buffer)\n",
    "ax.set_ylim(miny - buffer, maxy + buffer)\n",
    "\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = gpd.sjoin(gdf_bpe_23.drop(columns='index_right'),communes, how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = test.groupby('LIBCOM').agg(\n",
    "    count=('geometry', 'count'),\n",
    "    insee=('insee', 'first')\n",
    ")\n",
    "\n",
    "final_web = pd.merge(test_data, communes.drop(columns=['wikipedia','surf_ha']), left_on='insee', right_on='insee')\n",
    "final_web = gpd.GeoDataFrame(final_web)\n",
    "final_web.to_file('webapp_data.geojson', driver='GeoJSON')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>insee</th>\n",
       "      <th>nom</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>97203</td>\n",
       "      <td>Basse-Pointe</td>\n",
       "      <td>POLYGON ((-61.16396 14.81614, -61.16354 14.816...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>97234</td>\n",
       "      <td>Bellefontaine</td>\n",
       "      <td>POLYGON ((-61.16772 14.6753, -61.16762 14.6753...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>163</td>\n",
       "      <td>97205</td>\n",
       "      <td>Case-Pilote</td>\n",
       "      <td>POLYGON ((-61.15402 14.65581, -61.15394 14.655...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>717</td>\n",
       "      <td>97207</td>\n",
       "      <td>Ducos</td>\n",
       "      <td>POLYGON ((-61.00224 14.56532, -61.00222 14.565...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18</td>\n",
       "      <td>97208</td>\n",
       "      <td>Fonds-Saint-Denis</td>\n",
       "      <td>POLYGON ((-61.16254 14.74252, -61.16232 14.743...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3600</td>\n",
       "      <td>97209</td>\n",
       "      <td>Fort-de-France</td>\n",
       "      <td>POLYGON ((-61.10302 14.68838, -61.10295 14.688...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>18</td>\n",
       "      <td>97211</td>\n",
       "      <td>Grand'Rivière</td>\n",
       "      <td>POLYGON ((-61.20406 14.86188, -61.20398 14.861...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>300</td>\n",
       "      <td>97212</td>\n",
       "      <td>Gros-Morne</td>\n",
       "      <td>POLYGON ((-61.08483 14.72449, -61.08481 14.724...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>59</td>\n",
       "      <td>97201</td>\n",
       "      <td>L'Ajoupa-Bouillon</td>\n",
       "      <td>POLYGON ((-61.16355 14.8144, -61.16314 14.8153...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>518</td>\n",
       "      <td>97230</td>\n",
       "      <td>La Trinité</td>\n",
       "      <td>MULTIPOLYGON (((-61.02188 14.73527, -61.02187 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>135</td>\n",
       "      <td>97204</td>\n",
       "      <td>Le Carbet</td>\n",
       "      <td>POLYGON ((-61.18466 14.70914, -61.18466 14.709...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>262</td>\n",
       "      <td>97206</td>\n",
       "      <td>Le Diamant</td>\n",
       "      <td>MULTIPOLYGON (((-61.05754 14.48459, -61.0567 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>655</td>\n",
       "      <td>97210</td>\n",
       "      <td>Le François</td>\n",
       "      <td>MULTIPOLYGON (((-60.94949 14.62643, -60.94771 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1741</td>\n",
       "      <td>97213</td>\n",
       "      <td>Le Lamentin</td>\n",
       "      <td>MULTIPOLYGON (((-61.03986 14.64574, -61.0381 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>246</td>\n",
       "      <td>97214</td>\n",
       "      <td>Le Lorrain</td>\n",
       "      <td>POLYGON ((-61.10821 14.7978, -61.10716 14.8064...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>101</td>\n",
       "      <td>97216</td>\n",
       "      <td>Le Marigot</td>\n",
       "      <td>POLYGON ((-61.08763 14.74285, -61.08761 14.743...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>404</td>\n",
       "      <td>97217</td>\n",
       "      <td>Le Marin</td>\n",
       "      <td>MULTIPOLYGON (((-60.90745 14.45736, -60.9047 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>163</td>\n",
       "      <td>97218</td>\n",
       "      <td>Le Morne-Rouge</td>\n",
       "      <td>POLYGON ((-61.15851 14.76026, -61.15846 14.760...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>58</td>\n",
       "      <td>97233</td>\n",
       "      <td>Le Morne-Vert</td>\n",
       "      <td>POLYGON ((-61.15922 14.70645, -61.15917 14.706...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>40</td>\n",
       "      <td>97219</td>\n",
       "      <td>Le Prêcheur</td>\n",
       "      <td>MULTIPOLYGON (((-61.22903 14.82236, -61.22902 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>743</td>\n",
       "      <td>97222</td>\n",
       "      <td>Le Robert</td>\n",
       "      <td>MULTIPOLYGON (((-60.9896 14.68378, -60.98909 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>286</td>\n",
       "      <td>97232</td>\n",
       "      <td>Le Vauclin</td>\n",
       "      <td>MULTIPOLYGON (((-60.89701 14.56127, -60.89678 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>130</td>\n",
       "      <td>97202</td>\n",
       "      <td>Les Anses-d'Arlet</td>\n",
       "      <td>POLYGON ((-61.10092 14.50834, -61.10091 14.508...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>393</td>\n",
       "      <td>97231</td>\n",
       "      <td>Les Trois-Îlets</td>\n",
       "      <td>MULTIPOLYGON (((-61.07991 14.5441, -61.0799 14...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>16</td>\n",
       "      <td>97215</td>\n",
       "      <td>Macouba</td>\n",
       "      <td>POLYGON ((-61.16755 14.86125, -61.16755 14.861...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>402</td>\n",
       "      <td>97220</td>\n",
       "      <td>Rivière-Pilote</td>\n",
       "      <td>POLYGON ((-60.92942 14.51836, -60.92886 14.522...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>542</td>\n",
       "      <td>97221</td>\n",
       "      <td>Rivière-Salée</td>\n",
       "      <td>MULTIPOLYGON (((-61.00446 14.50327, -61.00438 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>312</td>\n",
       "      <td>97223</td>\n",
       "      <td>Saint-Esprit</td>\n",
       "      <td>POLYGON ((-60.95617 14.55766, -60.95561 14.557...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>503</td>\n",
       "      <td>97224</td>\n",
       "      <td>Saint-Joseph</td>\n",
       "      <td>POLYGON ((-61.0868 14.71891, -61.08678 14.7190...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>204</td>\n",
       "      <td>97225</td>\n",
       "      <td>Saint-Pierre</td>\n",
       "      <td>POLYGON ((-61.21405 14.78193, -61.21388 14.782...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>179</td>\n",
       "      <td>97226</td>\n",
       "      <td>Sainte-Anne</td>\n",
       "      <td>MULTIPOLYGON (((-60.89345 14.42019, -60.89339 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>412</td>\n",
       "      <td>97227</td>\n",
       "      <td>Sainte-Luce</td>\n",
       "      <td>POLYGON ((-60.98343 14.49575, -60.98338 14.496...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>598</td>\n",
       "      <td>97228</td>\n",
       "      <td>Sainte-Marie</td>\n",
       "      <td>MULTIPOLYGON (((-61.05448 14.75609, -61.05446 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>833</td>\n",
       "      <td>97229</td>\n",
       "      <td>Schœlcher</td>\n",
       "      <td>POLYGON ((-61.11902 14.63024, -61.11842 14.631...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count  insee                nom  \\\n",
       "0     150  97203       Basse-Pointe   \n",
       "1      49  97234      Bellefontaine   \n",
       "2     163  97205        Case-Pilote   \n",
       "3     717  97207              Ducos   \n",
       "4      18  97208  Fonds-Saint-Denis   \n",
       "5    3600  97209     Fort-de-France   \n",
       "6      18  97211      Grand'Rivière   \n",
       "7     300  97212         Gros-Morne   \n",
       "8      59  97201  L'Ajoupa-Bouillon   \n",
       "9     518  97230         La Trinité   \n",
       "10    135  97204          Le Carbet   \n",
       "11    262  97206         Le Diamant   \n",
       "12    655  97210        Le François   \n",
       "13   1741  97213        Le Lamentin   \n",
       "14    246  97214         Le Lorrain   \n",
       "15    101  97216         Le Marigot   \n",
       "16    404  97217           Le Marin   \n",
       "17    163  97218     Le Morne-Rouge   \n",
       "18     58  97233      Le Morne-Vert   \n",
       "19     40  97219        Le Prêcheur   \n",
       "20    743  97222          Le Robert   \n",
       "21    286  97232         Le Vauclin   \n",
       "22    130  97202  Les Anses-d'Arlet   \n",
       "23    393  97231    Les Trois-Îlets   \n",
       "24     16  97215            Macouba   \n",
       "25    402  97220     Rivière-Pilote   \n",
       "26    542  97221      Rivière-Salée   \n",
       "27    312  97223       Saint-Esprit   \n",
       "28    503  97224       Saint-Joseph   \n",
       "29    204  97225       Saint-Pierre   \n",
       "30    179  97226        Sainte-Anne   \n",
       "31    412  97227        Sainte-Luce   \n",
       "32    598  97228       Sainte-Marie   \n",
       "33    833  97229          Schœlcher   \n",
       "\n",
       "                                             geometry  \n",
       "0   POLYGON ((-61.16396 14.81614, -61.16354 14.816...  \n",
       "1   POLYGON ((-61.16772 14.6753, -61.16762 14.6753...  \n",
       "2   POLYGON ((-61.15402 14.65581, -61.15394 14.655...  \n",
       "3   POLYGON ((-61.00224 14.56532, -61.00222 14.565...  \n",
       "4   POLYGON ((-61.16254 14.74252, -61.16232 14.743...  \n",
       "5   POLYGON ((-61.10302 14.68838, -61.10295 14.688...  \n",
       "6   POLYGON ((-61.20406 14.86188, -61.20398 14.861...  \n",
       "7   POLYGON ((-61.08483 14.72449, -61.08481 14.724...  \n",
       "8   POLYGON ((-61.16355 14.8144, -61.16314 14.8153...  \n",
       "9   MULTIPOLYGON (((-61.02188 14.73527, -61.02187 ...  \n",
       "10  POLYGON ((-61.18466 14.70914, -61.18466 14.709...  \n",
       "11  MULTIPOLYGON (((-61.05754 14.48459, -61.0567 1...  \n",
       "12  MULTIPOLYGON (((-60.94949 14.62643, -60.94771 ...  \n",
       "13  MULTIPOLYGON (((-61.03986 14.64574, -61.0381 1...  \n",
       "14  POLYGON ((-61.10821 14.7978, -61.10716 14.8064...  \n",
       "15  POLYGON ((-61.08763 14.74285, -61.08761 14.743...  \n",
       "16  MULTIPOLYGON (((-60.90745 14.45736, -60.9047 1...  \n",
       "17  POLYGON ((-61.15851 14.76026, -61.15846 14.760...  \n",
       "18  POLYGON ((-61.15922 14.70645, -61.15917 14.706...  \n",
       "19  MULTIPOLYGON (((-61.22903 14.82236, -61.22902 ...  \n",
       "20  MULTIPOLYGON (((-60.9896 14.68378, -60.98909 1...  \n",
       "21  MULTIPOLYGON (((-60.89701 14.56127, -60.89678 ...  \n",
       "22  POLYGON ((-61.10092 14.50834, -61.10091 14.508...  \n",
       "23  MULTIPOLYGON (((-61.07991 14.5441, -61.0799 14...  \n",
       "24  POLYGON ((-61.16755 14.86125, -61.16755 14.861...  \n",
       "25  POLYGON ((-60.92942 14.51836, -60.92886 14.522...  \n",
       "26  MULTIPOLYGON (((-61.00446 14.50327, -61.00438 ...  \n",
       "27  POLYGON ((-60.95617 14.55766, -60.95561 14.557...  \n",
       "28  POLYGON ((-61.0868 14.71891, -61.08678 14.7190...  \n",
       "29  POLYGON ((-61.21405 14.78193, -61.21388 14.782...  \n",
       "30  MULTIPOLYGON (((-60.89345 14.42019, -60.89339 ...  \n",
       "31  POLYGON ((-60.98343 14.49575, -60.98338 14.496...  \n",
       "32  MULTIPOLYGON (((-61.05448 14.75609, -61.05446 ...  \n",
       "33  POLYGON ((-61.11902 14.63024, -61.11842 14.631...  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_web"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf[['Idcar_200m','geometry']].to_file('webapp_data/gdf.geojson', driver='GeoJSON')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11132"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(gdf['Idcar_200m'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/homebrew/Caskroom/mambaforge/base/envs/data_analysis/lib/python3.11/site-packages/pyogrio/geopandas.py:662: UserWarning: 'crs' was not provided.  The output dataset will not have projection information defined and may not be usable in other systems.\n",
      "  write(\n"
     ]
    }
   ],
   "source": [
    "all_isochrones_df.to_file('webapp_data/isochrones.geojson', driver='GeoJSON')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['97203', '97209'], dtype=object)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_isochrones_df['commune_id'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/homebrew/Caskroom/mambaforge/base/envs/data_analysis/lib/python3.11/site-packages/pyogrio/geopandas.py:662: UserWarning: 'crs' was not provided.  The output dataset will not have projection information defined and may not be usable in other systems.\n",
      "  write(\n"
     ]
    }
   ],
   "source": [
    "# Merge the dataframes\n",
    "merged_df = pd.merge(all_isochrones_df, gdf[['Idcar_200m', 'geometry']], left_on='carreaux_id', right_on='Idcar_200m')\n",
    "merged_df = merged_df.rename(columns={'geometry_x': 'isochrone_geometry', 'geometry_y': 'carreau_geometry'})\n",
    "\n",
    "# Save the isochrone geometries\n",
    "isochrones_gdf = merged_df.drop(columns='carreau_geometry')\n",
    "isochrones_gdf.to_file('webapp_data/isochrones.geojson', driver='GeoJSON')\n",
    "\n",
    "# Save the carreau geometries\n",
    "carreaux_gdf = merged_df.drop(columns='isochrone_geometry')\n",
    "carreaux_gdf.to_file('webapp_data/carreaux.geojson', driver='GeoJSON')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>properties.group_index</th>\n",
       "      <th>properties.value</th>\n",
       "      <th>properties.center</th>\n",
       "      <th>geometry.coordinates</th>\n",
       "      <th>geometry.type</th>\n",
       "      <th>isochrone_geometry</th>\n",
       "      <th>carreaux_id</th>\n",
       "      <th>commune_id</th>\n",
       "      <th>profile</th>\n",
       "      <th>Idcar_200m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.12156856725416, 14.86728070878056]</td>\n",
       "      <td>[[[-61.130948, 14.862972], [-61.130768, 14.862...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.13095 14.86297, -61.13077 14.862...</td>\n",
       "      <td>CRS5490RES200mN1644400E702000</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1644400E702000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.102951512267246, 14.859771083281112]</td>\n",
       "      <td>[[[-61.128922, 14.866931], [-61.12893, 14.8668...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12892 14.86693, -61.12893 14.866...</td>\n",
       "      <td>CRS5490RES200mN1643600E704000</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1643600E704000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11412325085371, 14.86901397243511]</td>\n",
       "      <td>[[[-61.137879, 14.874488], [-61.1359, 14.87165...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.13788 14.87449, -61.1359 14.8716...</td>\n",
       "      <td>CRS5490RES200mN1644600E702800</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1644600E702800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.102951512267246, 14.859771083281112]</td>\n",
       "      <td>[[[-61.10402, 14.859601], [-61.103669, 14.8591...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.10402 14.8596, -61.10367 14.8591...</td>\n",
       "      <td>CRS5490RES200mN1643600E704000</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1643600E704000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.1143439073765, 14.865416680165032]</td>\n",
       "      <td>[[[-61.131595, 14.868621], [-61.13152, 14.8684...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.1316 14.86862, -61.13152 14.8684...</td>\n",
       "      <td>CRS5490RES200mN1644200E702800</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1644200E702800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.12156856725416, 14.86728070878056]</td>\n",
       "      <td>[[[-61.124281, 14.868477], [-61.123515, 14.866...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12428 14.86848, -61.12352 14.866...</td>\n",
       "      <td>CRS5490RES200mN1644400E702000</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1644400E702000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.118117642376816, 14.829289432771024]</td>\n",
       "      <td>[[[-61.1253, 14.834557], [-61.125957, 14.82866...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.1253 14.83456, -61.12596 14.8286...</td>\n",
       "      <td>CRS5490RES200mN1640200E702400</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1640200E702400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.1143439073765, 14.865416680165032]</td>\n",
       "      <td>[[[-61.114498, 14.864967], [-61.112318, 14.865...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.1145 14.86497, -61.11232 14.8658...</td>\n",
       "      <td>CRS5490RES200mN1644200E702800</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1644200E702800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11412325085371, 14.86901397243511]</td>\n",
       "      <td>[[[-61.127277, 14.867686], [-61.124483, 14.864...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12728 14.86769, -61.12448 14.864...</td>\n",
       "      <td>CRS5490RES200mN1644600E702800</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1644600E702800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11992540241651, 14.83464018512672]</td>\n",
       "      <td>[[[-61.131302, 14.823144], [-61.131325, 14.822...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.1313 14.82314, -61.13132 14.8228...</td>\n",
       "      <td>CRS5490RES200mN1640800E702200</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1640800E702200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.1185096, 14.8354818]</td>\n",
       "      <td>[[[-61.129191, 14.824789], [-61.130144, 14.824...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12919 14.82479, -61.13014 14.824...</td>\n",
       "      <td>CRS5490RES200mN1640800E702400</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1640800E702400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.12009038535487, 14.829313971163774]</td>\n",
       "      <td>[[[-61.130836, 14.823422], [-61.127349, 14.824...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.13084 14.82342, -61.12735 14.824...</td>\n",
       "      <td>CRS5490RES200mN1640200E702200</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1640200E702200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.102951512267246, 14.859771083281112]</td>\n",
       "      <td>[[[-61.113131, 14.865859], [-61.111559, 14.861...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.11313 14.86586, -61.11156 14.861...</td>\n",
       "      <td>CRS5490RES200mN1643600E704000</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1643600E704000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11198792503241, 14.867116009823976]</td>\n",
       "      <td>[[[-61.13439, 14.871377], [-61.134018, 14.8707...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.13439 14.87138, -61.13402 14.870...</td>\n",
       "      <td>CRS5490RES200mN1644400E703000</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1644400E703000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11412325085371, 14.86901397243511]</td>\n",
       "      <td>[[[-61.116875, 14.866833], [-61.116641, 14.866...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.11688 14.86683, -61.11664 14.866...</td>\n",
       "      <td>CRS5490RES200mN1644600E702800</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1644600E702800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.1185096, 14.8354818]</td>\n",
       "      <td>[[[-61.121483, 14.833306], [-61.121382, 14.832...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12148 14.83331, -61.12138 14.832...</td>\n",
       "      <td>CRS5490RES200mN1640800E702400</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1640800E702400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11198792503241, 14.867116009823976]</td>\n",
       "      <td>[[[-61.12249, 14.867639], [-61.117998, 14.8642...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12249 14.86764, -61.118 14.86421...</td>\n",
       "      <td>CRS5490RES200mN1644400E703000</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1644400E703000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11992540241651, 14.83464018512672]</td>\n",
       "      <td>[[[-61.128315, 14.831728], [-61.126278, 14.828...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12832 14.83173, -61.12628 14.828...</td>\n",
       "      <td>CRS5490RES200mN1640800E702200</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1640800E702200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.12156856725416, 14.86728070878056]</td>\n",
       "      <td>[[[-61.139742, 14.876841], [-61.138104, 14.873...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.13974 14.87684, -61.1381 14.8736...</td>\n",
       "      <td>CRS5490RES200mN1644400E702000</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1644400E702000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.1185096, 14.8354818]</td>\n",
       "      <td>[[[-61.125803, 14.827996], [-61.126088, 14.825...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.1258 14.828, -61.12609 14.82595,...</td>\n",
       "      <td>CRS5490RES200mN1640800E702400</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1640800E702400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.12009038535487, 14.829313971163774]</td>\n",
       "      <td>[[[-61.122874, 14.829014], [-61.122626, 14.828...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12287 14.82901, -61.12263 14.828...</td>\n",
       "      <td>CRS5490RES200mN1640200E702200</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1640200E702200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.06631169727152, 14.606524444109795]</td>\n",
       "      <td>[[[-61.076846, 14.609316], [-61.077731, 14.604...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.07685 14.60932, -61.07773 14.604...</td>\n",
       "      <td>CRS5490RES200mN1615600E708200</td>\n",
       "      <td>97209</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1615600E708200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.118117642376816, 14.829289432771024]</td>\n",
       "      <td>[[[-61.118774, 14.828305], [-61.118428, 14.828...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.11877 14.8283, -61.11843 14.8282...</td>\n",
       "      <td>CRS5490RES200mN1640200E702400</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1640200E702400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.066339530191286, 14.606479597959588]</td>\n",
       "      <td>[[[-61.089935, 14.611212], [-61.089076, 14.609...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.08994 14.61121, -61.08908 14.609...</td>\n",
       "      <td>CRS5490RES200mN1615600E708200</td>\n",
       "      <td>97209</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1615600E708200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11992540241651, 14.83464018512672]</td>\n",
       "      <td>[[[-61.122462, 14.832853], [-61.122423, 14.832...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12246 14.83285, -61.12242 14.832...</td>\n",
       "      <td>CRS5490RES200mN1640800E702200</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1640800E702200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.06631169727152, 14.606524444109795]</td>\n",
       "      <td>[[[-61.069876, 14.607757], [-61.069864, 14.607...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.06988 14.60776, -61.06986 14.607...</td>\n",
       "      <td>CRS5490RES200mN1615600E708200</td>\n",
       "      <td>97209</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1615600E708200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.1143439073765, 14.865416680165032]</td>\n",
       "      <td>[[[-61.121651, 14.868463], [-61.117416, 14.865...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.12165 14.86846, -61.11742 14.865...</td>\n",
       "      <td>CRS5490RES200mN1644200E702800</td>\n",
       "      <td>97203</td>\n",
       "      <td>cycling-regular</td>\n",
       "      <td>CRS5490RES200mN1644200E702800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.12009038535487, 14.829313971163774]</td>\n",
       "      <td>[[[-61.133898, 14.82002], [-61.132389, 14.8209...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.1339 14.82002, -61.13239 14.8209...</td>\n",
       "      <td>CRS5490RES200mN1640200E702200</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1640200E702200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.118117642376816, 14.829289432771024]</td>\n",
       "      <td>[[[-61.129496, 14.824111], [-61.127349, 14.824...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.1295 14.82411, -61.12735 14.8246...</td>\n",
       "      <td>CRS5490RES200mN1640200E702400</td>\n",
       "      <td>97203</td>\n",
       "      <td>driving-car</td>\n",
       "      <td>CRS5490RES200mN1640200E702400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Feature</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[-61.11198792503241, 14.867116009823976]</td>\n",
       "      <td>[[[-61.113831, 14.86882], [-61.113873, 14.8665...</td>\n",
       "      <td>Polygon</td>\n",
       "      <td>POLYGON ((-61.11383 14.86882, -61.11387 14.866...</td>\n",
       "      <td>CRS5490RES200mN1644400E703000</td>\n",
       "      <td>97203</td>\n",
       "      <td>foot-walking</td>\n",
       "      <td>CRS5490RES200mN1644400E703000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  properties.group_index  properties.value  \\\n",
       "0   Feature                       0             300.0   \n",
       "1   Feature                       0             300.0   \n",
       "2   Feature                       0             300.0   \n",
       "3   Feature                       0             300.0   \n",
       "4   Feature                       0             300.0   \n",
       "5   Feature                       0             300.0   \n",
       "6   Feature                       0             300.0   \n",
       "7   Feature                       0             300.0   \n",
       "8   Feature                       0             300.0   \n",
       "9   Feature                       0             300.0   \n",
       "10  Feature                       0             300.0   \n",
       "11  Feature                       0             300.0   \n",
       "12  Feature                       0             300.0   \n",
       "13  Feature                       0             300.0   \n",
       "14  Feature                       0             300.0   \n",
       "15  Feature                       0             300.0   \n",
       "16  Feature                       0             300.0   \n",
       "17  Feature                       0             300.0   \n",
       "18  Feature                       0             300.0   \n",
       "19  Feature                       0             300.0   \n",
       "20  Feature                       0             300.0   \n",
       "21  Feature                       0             300.0   \n",
       "22  Feature                       0             300.0   \n",
       "23  Feature                       0             300.0   \n",
       "24  Feature                       0             300.0   \n",
       "25  Feature                       0             300.0   \n",
       "26  Feature                       0             300.0   \n",
       "27  Feature                       0             300.0   \n",
       "28  Feature                       0             300.0   \n",
       "29  Feature                       0             300.0   \n",
       "\n",
       "                            properties.center  \\\n",
       "0     [-61.12156856725416, 14.86728070878056]   \n",
       "1   [-61.102951512267246, 14.859771083281112]   \n",
       "2     [-61.11412325085371, 14.86901397243511]   \n",
       "3   [-61.102951512267246, 14.859771083281112]   \n",
       "4     [-61.1143439073765, 14.865416680165032]   \n",
       "5     [-61.12156856725416, 14.86728070878056]   \n",
       "6   [-61.118117642376816, 14.829289432771024]   \n",
       "7     [-61.1143439073765, 14.865416680165032]   \n",
       "8     [-61.11412325085371, 14.86901397243511]   \n",
       "9     [-61.11992540241651, 14.83464018512672]   \n",
       "10                  [-61.1185096, 14.8354818]   \n",
       "11   [-61.12009038535487, 14.829313971163774]   \n",
       "12  [-61.102951512267246, 14.859771083281112]   \n",
       "13   [-61.11198792503241, 14.867116009823976]   \n",
       "14    [-61.11412325085371, 14.86901397243511]   \n",
       "15                  [-61.1185096, 14.8354818]   \n",
       "16   [-61.11198792503241, 14.867116009823976]   \n",
       "17    [-61.11992540241651, 14.83464018512672]   \n",
       "18    [-61.12156856725416, 14.86728070878056]   \n",
       "19                  [-61.1185096, 14.8354818]   \n",
       "20   [-61.12009038535487, 14.829313971163774]   \n",
       "21   [-61.06631169727152, 14.606524444109795]   \n",
       "22  [-61.118117642376816, 14.829289432771024]   \n",
       "23  [-61.066339530191286, 14.606479597959588]   \n",
       "24    [-61.11992540241651, 14.83464018512672]   \n",
       "25   [-61.06631169727152, 14.606524444109795]   \n",
       "26    [-61.1143439073765, 14.865416680165032]   \n",
       "27   [-61.12009038535487, 14.829313971163774]   \n",
       "28  [-61.118117642376816, 14.829289432771024]   \n",
       "29   [-61.11198792503241, 14.867116009823976]   \n",
       "\n",
       "                                 geometry.coordinates geometry.type  \\\n",
       "0   [[[-61.130948, 14.862972], [-61.130768, 14.862...       Polygon   \n",
       "1   [[[-61.128922, 14.866931], [-61.12893, 14.8668...       Polygon   \n",
       "2   [[[-61.137879, 14.874488], [-61.1359, 14.87165...       Polygon   \n",
       "3   [[[-61.10402, 14.859601], [-61.103669, 14.8591...       Polygon   \n",
       "4   [[[-61.131595, 14.868621], [-61.13152, 14.8684...       Polygon   \n",
       "5   [[[-61.124281, 14.868477], [-61.123515, 14.866...       Polygon   \n",
       "6   [[[-61.1253, 14.834557], [-61.125957, 14.82866...       Polygon   \n",
       "7   [[[-61.114498, 14.864967], [-61.112318, 14.865...       Polygon   \n",
       "8   [[[-61.127277, 14.867686], [-61.124483, 14.864...       Polygon   \n",
       "9   [[[-61.131302, 14.823144], [-61.131325, 14.822...       Polygon   \n",
       "10  [[[-61.129191, 14.824789], [-61.130144, 14.824...       Polygon   \n",
       "11  [[[-61.130836, 14.823422], [-61.127349, 14.824...       Polygon   \n",
       "12  [[[-61.113131, 14.865859], [-61.111559, 14.861...       Polygon   \n",
       "13  [[[-61.13439, 14.871377], [-61.134018, 14.8707...       Polygon   \n",
       "14  [[[-61.116875, 14.866833], [-61.116641, 14.866...       Polygon   \n",
       "15  [[[-61.121483, 14.833306], [-61.121382, 14.832...       Polygon   \n",
       "16  [[[-61.12249, 14.867639], [-61.117998, 14.8642...       Polygon   \n",
       "17  [[[-61.128315, 14.831728], [-61.126278, 14.828...       Polygon   \n",
       "18  [[[-61.139742, 14.876841], [-61.138104, 14.873...       Polygon   \n",
       "19  [[[-61.125803, 14.827996], [-61.126088, 14.825...       Polygon   \n",
       "20  [[[-61.122874, 14.829014], [-61.122626, 14.828...       Polygon   \n",
       "21  [[[-61.076846, 14.609316], [-61.077731, 14.604...       Polygon   \n",
       "22  [[[-61.118774, 14.828305], [-61.118428, 14.828...       Polygon   \n",
       "23  [[[-61.089935, 14.611212], [-61.089076, 14.609...       Polygon   \n",
       "24  [[[-61.122462, 14.832853], [-61.122423, 14.832...       Polygon   \n",
       "25  [[[-61.069876, 14.607757], [-61.069864, 14.607...       Polygon   \n",
       "26  [[[-61.121651, 14.868463], [-61.117416, 14.865...       Polygon   \n",
       "27  [[[-61.133898, 14.82002], [-61.132389, 14.8209...       Polygon   \n",
       "28  [[[-61.129496, 14.824111], [-61.127349, 14.824...       Polygon   \n",
       "29  [[[-61.113831, 14.86882], [-61.113873, 14.8665...       Polygon   \n",
       "\n",
       "                                   isochrone_geometry  \\\n",
       "0   POLYGON ((-61.13095 14.86297, -61.13077 14.862...   \n",
       "1   POLYGON ((-61.12892 14.86693, -61.12893 14.866...   \n",
       "2   POLYGON ((-61.13788 14.87449, -61.1359 14.8716...   \n",
       "3   POLYGON ((-61.10402 14.8596, -61.10367 14.8591...   \n",
       "4   POLYGON ((-61.1316 14.86862, -61.13152 14.8684...   \n",
       "5   POLYGON ((-61.12428 14.86848, -61.12352 14.866...   \n",
       "6   POLYGON ((-61.1253 14.83456, -61.12596 14.8286...   \n",
       "7   POLYGON ((-61.1145 14.86497, -61.11232 14.8658...   \n",
       "8   POLYGON ((-61.12728 14.86769, -61.12448 14.864...   \n",
       "9   POLYGON ((-61.1313 14.82314, -61.13132 14.8228...   \n",
       "10  POLYGON ((-61.12919 14.82479, -61.13014 14.824...   \n",
       "11  POLYGON ((-61.13084 14.82342, -61.12735 14.824...   \n",
       "12  POLYGON ((-61.11313 14.86586, -61.11156 14.861...   \n",
       "13  POLYGON ((-61.13439 14.87138, -61.13402 14.870...   \n",
       "14  POLYGON ((-61.11688 14.86683, -61.11664 14.866...   \n",
       "15  POLYGON ((-61.12148 14.83331, -61.12138 14.832...   \n",
       "16  POLYGON ((-61.12249 14.86764, -61.118 14.86421...   \n",
       "17  POLYGON ((-61.12832 14.83173, -61.12628 14.828...   \n",
       "18  POLYGON ((-61.13974 14.87684, -61.1381 14.8736...   \n",
       "19  POLYGON ((-61.1258 14.828, -61.12609 14.82595,...   \n",
       "20  POLYGON ((-61.12287 14.82901, -61.12263 14.828...   \n",
       "21  POLYGON ((-61.07685 14.60932, -61.07773 14.604...   \n",
       "22  POLYGON ((-61.11877 14.8283, -61.11843 14.8282...   \n",
       "23  POLYGON ((-61.08994 14.61121, -61.08908 14.609...   \n",
       "24  POLYGON ((-61.12246 14.83285, -61.12242 14.832...   \n",
       "25  POLYGON ((-61.06988 14.60776, -61.06986 14.607...   \n",
       "26  POLYGON ((-61.12165 14.86846, -61.11742 14.865...   \n",
       "27  POLYGON ((-61.1339 14.82002, -61.13239 14.8209...   \n",
       "28  POLYGON ((-61.1295 14.82411, -61.12735 14.8246...   \n",
       "29  POLYGON ((-61.11383 14.86882, -61.11387 14.866...   \n",
       "\n",
       "                      carreaux_id commune_id          profile  \\\n",
       "0   CRS5490RES200mN1644400E702000      97203  cycling-regular   \n",
       "1   CRS5490RES200mN1643600E704000      97203      driving-car   \n",
       "2   CRS5490RES200mN1644600E702800      97203      driving-car   \n",
       "3   CRS5490RES200mN1643600E704000      97203     foot-walking   \n",
       "4   CRS5490RES200mN1644200E702800      97203      driving-car   \n",
       "5   CRS5490RES200mN1644400E702000      97203     foot-walking   \n",
       "6   CRS5490RES200mN1640200E702400      97203  cycling-regular   \n",
       "7   CRS5490RES200mN1644200E702800      97203     foot-walking   \n",
       "8   CRS5490RES200mN1644600E702800      97203  cycling-regular   \n",
       "9   CRS5490RES200mN1640800E702200      97203      driving-car   \n",
       "10  CRS5490RES200mN1640800E702400      97203      driving-car   \n",
       "11  CRS5490RES200mN1640200E702200      97203  cycling-regular   \n",
       "12  CRS5490RES200mN1643600E704000      97203  cycling-regular   \n",
       "13  CRS5490RES200mN1644400E703000      97203      driving-car   \n",
       "14  CRS5490RES200mN1644600E702800      97203     foot-walking   \n",
       "15  CRS5490RES200mN1640800E702400      97203     foot-walking   \n",
       "16  CRS5490RES200mN1644400E703000      97203  cycling-regular   \n",
       "17  CRS5490RES200mN1640800E702200      97203  cycling-regular   \n",
       "18  CRS5490RES200mN1644400E702000      97203      driving-car   \n",
       "19  CRS5490RES200mN1640800E702400      97203  cycling-regular   \n",
       "20  CRS5490RES200mN1640200E702200      97203     foot-walking   \n",
       "21  CRS5490RES200mN1615600E708200      97209  cycling-regular   \n",
       "22  CRS5490RES200mN1640200E702400      97203     foot-walking   \n",
       "23  CRS5490RES200mN1615600E708200      97209      driving-car   \n",
       "24  CRS5490RES200mN1640800E702200      97203     foot-walking   \n",
       "25  CRS5490RES200mN1615600E708200      97209     foot-walking   \n",
       "26  CRS5490RES200mN1644200E702800      97203  cycling-regular   \n",
       "27  CRS5490RES200mN1640200E702200      97203      driving-car   \n",
       "28  CRS5490RES200mN1640200E702400      97203      driving-car   \n",
       "29  CRS5490RES200mN1644400E703000      97203     foot-walking   \n",
       "\n",
       "                       Idcar_200m  \n",
       "0   CRS5490RES200mN1644400E702000  \n",
       "1   CRS5490RES200mN1643600E704000  \n",
       "2   CRS5490RES200mN1644600E702800  \n",
       "3   CRS5490RES200mN1643600E704000  \n",
       "4   CRS5490RES200mN1644200E702800  \n",
       "5   CRS5490RES200mN1644400E702000  \n",
       "6   CRS5490RES200mN1640200E702400  \n",
       "7   CRS5490RES200mN1644200E702800  \n",
       "8   CRS5490RES200mN1644600E702800  \n",
       "9   CRS5490RES200mN1640800E702200  \n",
       "10  CRS5490RES200mN1640800E702400  \n",
       "11  CRS5490RES200mN1640200E702200  \n",
       "12  CRS5490RES200mN1643600E704000  \n",
       "13  CRS5490RES200mN1644400E703000  \n",
       "14  CRS5490RES200mN1644600E702800  \n",
       "15  CRS5490RES200mN1640800E702400  \n",
       "16  CRS5490RES200mN1644400E703000  \n",
       "17  CRS5490RES200mN1640800E702200  \n",
       "18  CRS5490RES200mN1644400E702000  \n",
       "19  CRS5490RES200mN1640800E702400  \n",
       "20  CRS5490RES200mN1640200E702200  \n",
       "21  CRS5490RES200mN1615600E708200  \n",
       "22  CRS5490RES200mN1640200E702400  \n",
       "23  CRS5490RES200mN1615600E708200  \n",
       "24  CRS5490RES200mN1640800E702200  \n",
       "25  CRS5490RES200mN1615600E708200  \n",
       "26  CRS5490RES200mN1644200E702800  \n",
       "27  CRS5490RES200mN1640200E702200  \n",
       "28  CRS5490RES200mN1640200E702400  \n",
       "29  CRS5490RES200mN1644400E703000  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isochrones_gdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Create a GeoDataFrame with only 'LONGITUDE' and 'LATITUDE' columns\n",
    "bpe_points = gpd.GeoDataFrame(gdf_bpe_23, geometry=gpd.points_from_xy(gdf_bpe_23.LONGITUDE, gdf_bpe_23.LATITUDE))\n",
    "\n",
    "# Select only the 'LONGITUDE', 'LATITUDE', and 'geometry' columns\n",
    "bpe_points = bpe_points[['LONGITUDE', 'LATITUDE', 'geometry','Idcar_200m','LIBCOM','NOMRS']]\n",
    "\n",
    "# Save the GeoDataFrame to a file\n",
    "bpe_points.to_file('webapp_data/bpe_points.geojson', driver='GeoJSON')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>geometry</th>\n",
       "      <th>Idcar_200m</th>\n",
       "      <th>LIBCOM</th>\n",
       "      <th>NOMRS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20557</th>\n",
       "      <td>-61.112172</td>\n",
       "      <td>14.827016</td>\n",
       "      <td>POINT (-61.11217 14.82702)</td>\n",
       "      <td>CRS5490RES200mN1640000E703000</td>\n",
       "      <td>L'AJOUPA-BOUILLON</td>\n",
       "      <td>AJOUPA BOUILLON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20558</th>\n",
       "      <td>-61.114982</td>\n",
       "      <td>14.824328</td>\n",
       "      <td>POINT (-61.11498 14.82433)</td>\n",
       "      <td>CRS5490RES200mN1639600E702800</td>\n",
       "      <td>L'AJOUPA-BOUILLON</td>\n",
       "      <td>L AJOUPA BOUILLON BP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20559</th>\n",
       "      <td>-61.110361</td>\n",
       "      <td>14.821579</td>\n",
       "      <td>POINT (-61.11036 14.82158)</td>\n",
       "      <td>CRS5490RES200mN1639400E703200</td>\n",
       "      <td>L'AJOUPA-BOUILLON</td>\n",
       "      <td>HONORIN ALEXIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20560</th>\n",
       "      <td>-61.109183</td>\n",
       "      <td>14.815173</td>\n",
       "      <td>POINT (-61.10918 14.81517)</td>\n",
       "      <td>CRS5490RES200mN1638600E703400</td>\n",
       "      <td>L'AJOUPA-BOUILLON</td>\n",
       "      <td>ANTIBE SIDNEY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20561</th>\n",
       "      <td>-61.115911</td>\n",
       "      <td>14.824335</td>\n",
       "      <td>POINT (-61.11591 14.82434)</td>\n",
       "      <td>CRS5490RES200mN1639600E702600</td>\n",
       "      <td>L'AJOUPA-BOUILLON</td>\n",
       "      <td>DANIEL CYPRIEN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37272</th>\n",
       "      <td>-61.163850</td>\n",
       "      <td>14.671370</td>\n",
       "      <td>POINT (-61.16385 14.67137)</td>\n",
       "      <td>CRS5490RES200mN1622600E697600</td>\n",
       "      <td>BELLEFONTAINE</td>\n",
       "      <td>BOULODROME DE LA COUR TAMARIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37275</th>\n",
       "      <td>-61.155830</td>\n",
       "      <td>14.663390</td>\n",
       "      <td>POINT (-61.15583 14.66339)</td>\n",
       "      <td>CRS5490RES200mN1621800E698400</td>\n",
       "      <td>BELLEFONTAINE</td>\n",
       "      <td>PLATEAU SPORTIF DE CHEVAL BLANC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37276</th>\n",
       "      <td>-61.153660</td>\n",
       "      <td>14.666150</td>\n",
       "      <td>POINT (-61.15366 14.66615)</td>\n",
       "      <td>CRS5490RES200mN1622200E698800</td>\n",
       "      <td>BELLEFONTAINE</td>\n",
       "      <td>LYCÉE DE BELLEFONTAINE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37277</th>\n",
       "      <td>-61.164000</td>\n",
       "      <td>14.671120</td>\n",
       "      <td>POINT (-61.164 14.67112)</td>\n",
       "      <td>CRS5490RES200mN1622600E697600</td>\n",
       "      <td>BELLEFONTAINE</td>\n",
       "      <td>TERRAIN DE BASKET -BALL DU BOURG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37279</th>\n",
       "      <td>-61.164168</td>\n",
       "      <td>14.673717</td>\n",
       "      <td>POINT (-61.16417 14.67372)</td>\n",
       "      <td>CRS5490RES200mN1623000E697600</td>\n",
       "      <td>BELLEFONTAINE</td>\n",
       "      <td>BIBLIOTHÈQUE MUNICIPALE IRÉNA BOULANGER</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14999 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       LONGITUDE   LATITUDE                    geometry  \\\n",
       "20557 -61.112172  14.827016  POINT (-61.11217 14.82702)   \n",
       "20558 -61.114982  14.824328  POINT (-61.11498 14.82433)   \n",
       "20559 -61.110361  14.821579  POINT (-61.11036 14.82158)   \n",
       "20560 -61.109183  14.815173  POINT (-61.10918 14.81517)   \n",
       "20561 -61.115911  14.824335  POINT (-61.11591 14.82434)   \n",
       "...          ...        ...                         ...   \n",
       "37272 -61.163850  14.671370  POINT (-61.16385 14.67137)   \n",
       "37275 -61.155830  14.663390  POINT (-61.15583 14.66339)   \n",
       "37276 -61.153660  14.666150  POINT (-61.15366 14.66615)   \n",
       "37277 -61.164000  14.671120    POINT (-61.164 14.67112)   \n",
       "37279 -61.164168  14.673717  POINT (-61.16417 14.67372)   \n",
       "\n",
       "                          Idcar_200m             LIBCOM  \\\n",
       "20557  CRS5490RES200mN1640000E703000  L'AJOUPA-BOUILLON   \n",
       "20558  CRS5490RES200mN1639600E702800  L'AJOUPA-BOUILLON   \n",
       "20559  CRS5490RES200mN1639400E703200  L'AJOUPA-BOUILLON   \n",
       "20560  CRS5490RES200mN1638600E703400  L'AJOUPA-BOUILLON   \n",
       "20561  CRS5490RES200mN1639600E702600  L'AJOUPA-BOUILLON   \n",
       "...                              ...                ...   \n",
       "37272  CRS5490RES200mN1622600E697600      BELLEFONTAINE   \n",
       "37275  CRS5490RES200mN1621800E698400      BELLEFONTAINE   \n",
       "37276  CRS5490RES200mN1622200E698800      BELLEFONTAINE   \n",
       "37277  CRS5490RES200mN1622600E697600      BELLEFONTAINE   \n",
       "37279  CRS5490RES200mN1623000E697600      BELLEFONTAINE   \n",
       "\n",
       "                                         NOMRS  \n",
       "20557                          AJOUPA BOUILLON  \n",
       "20558                     L AJOUPA BOUILLON BP  \n",
       "20559                           HONORIN ALEXIS  \n",
       "20560                            ANTIBE SIDNEY  \n",
       "20561                           DANIEL CYPRIEN  \n",
       "...                                        ...  \n",
       "37272            BOULODROME DE LA COUR TAMARIN  \n",
       "37275          PLATEAU SPORTIF DE CHEVAL BLANC  \n",
       "37276                   LYCÉE DE BELLEFONTAINE  \n",
       "37277         TERRAIN DE BASKET -BALL DU BOURG  \n",
       "37279  BIBLIOTHÈQUE MUNICIPALE IRÉNA BOULANGER  \n",
       "\n",
       "[14999 rows x 6 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bpe_points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf_bpe_23[['Idcar_200m','LIBCOM',]].to_csv('webapp_data/bpe_carreaux.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'FORT-DE-FRANCE'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_bpe_23.loc[gdf_bpe_23['Idcar_200m']=='CRS5490RES200mN1615600E708200']['LIBCOM'].unique().item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "data_analysis",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
